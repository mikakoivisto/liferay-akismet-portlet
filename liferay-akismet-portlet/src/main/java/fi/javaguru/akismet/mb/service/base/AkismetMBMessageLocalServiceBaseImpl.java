package fi.javaguru.akismet.mb.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import fi.javaguru.akismet.mb.model.AkismetMBMessage;
import fi.javaguru.akismet.mb.service.AkismetMBMessageLocalService;
import fi.javaguru.akismet.mb.service.persistence.AkismetMBMessagePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the akismet m b message local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link fi.javaguru.akismet.mb.service.impl.AkismetMBMessageLocalServiceImpl}.
 * </p>
 *
 * @author Mika Koivisto
 * @see fi.javaguru.akismet.mb.service.impl.AkismetMBMessageLocalServiceImpl
 * @see fi.javaguru.akismet.mb.service.AkismetMBMessageLocalServiceUtil
 * @generated
 */
public abstract class AkismetMBMessageLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements AkismetMBMessageLocalService,
        IdentifiableBean {
    @BeanReference(type = AkismetMBMessageLocalService.class)
    protected AkismetMBMessageLocalService akismetMBMessageLocalService;
    @BeanReference(type = AkismetMBMessagePersistence.class)
    protected AkismetMBMessagePersistence akismetMBMessagePersistence;
    @BeanReference(type = CounterLocalService.class)
    protected CounterLocalService counterLocalService;
    @BeanReference(type = ResourceLocalService.class)
    protected ResourceLocalService resourceLocalService;
    @BeanReference(type = ResourceService.class)
    protected ResourceService resourceService;
    @BeanReference(type = ResourcePersistence.class)
    protected ResourcePersistence resourcePersistence;
    @BeanReference(type = UserLocalService.class)
    protected UserLocalService userLocalService;
    @BeanReference(type = UserService.class)
    protected UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private AkismetMBMessageLocalServiceClpInvoker _clpInvoker = new AkismetMBMessageLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link fi.javaguru.akismet.mb.service.AkismetMBMessageLocalServiceUtil} to access the akismet m b message local service.
     */

    /**
     * Adds the akismet m b message to the database. Also notifies the appropriate model listeners.
     *
     * @param akismetMBMessage the akismet m b message
     * @return the akismet m b message that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public AkismetMBMessage addAkismetMBMessage(
        AkismetMBMessage akismetMBMessage) throws SystemException {
        akismetMBMessage.setNew(true);

        return akismetMBMessagePersistence.update(akismetMBMessage, false);
    }

    /**
     * Creates a new akismet m b message with the primary key. Does not add the akismet m b message to the database.
     *
     * @param akismetMBMessageId the primary key for the new akismet m b message
     * @return the new akismet m b message
     */
    public AkismetMBMessage createAkismetMBMessage(long akismetMBMessageId) {
        return akismetMBMessagePersistence.create(akismetMBMessageId);
    }

    /**
     * Deletes the akismet m b message with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param akismetMBMessageId the primary key of the akismet m b message
     * @return the akismet m b message that was removed
     * @throws PortalException if a akismet m b message with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    public AkismetMBMessage deleteAkismetMBMessage(long akismetMBMessageId)
        throws PortalException, SystemException {
        return akismetMBMessagePersistence.remove(akismetMBMessageId);
    }

    /**
     * Deletes the akismet m b message from the database. Also notifies the appropriate model listeners.
     *
     * @param akismetMBMessage the akismet m b message
     * @return the akismet m b message that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    public AkismetMBMessage deleteAkismetMBMessage(
        AkismetMBMessage akismetMBMessage) throws SystemException {
        return akismetMBMessagePersistence.remove(akismetMBMessage);
    }

    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(AkismetMBMessage.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return akismetMBMessagePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return akismetMBMessagePersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return akismetMBMessagePersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return akismetMBMessagePersistence.countWithDynamicQuery(dynamicQuery);
    }

    public AkismetMBMessage fetchAkismetMBMessage(long akismetMBMessageId)
        throws SystemException {
        return akismetMBMessagePersistence.fetchByPrimaryKey(akismetMBMessageId);
    }

    /**
     * Returns the akismet m b message with the primary key.
     *
     * @param akismetMBMessageId the primary key of the akismet m b message
     * @return the akismet m b message
     * @throws PortalException if a akismet m b message with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public AkismetMBMessage getAkismetMBMessage(long akismetMBMessageId)
        throws PortalException, SystemException {
        return akismetMBMessagePersistence.findByPrimaryKey(akismetMBMessageId);
    }

    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return akismetMBMessagePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the akismet m b messages.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param start the lower bound of the range of akismet m b messages
     * @param end the upper bound of the range of akismet m b messages (not inclusive)
     * @return the range of akismet m b messages
     * @throws SystemException if a system exception occurred
     */
    public List<AkismetMBMessage> getAkismetMBMessages(int start, int end)
        throws SystemException {
        return akismetMBMessagePersistence.findAll(start, end);
    }

    /**
     * Returns the number of akismet m b messages.
     *
     * @return the number of akismet m b messages
     * @throws SystemException if a system exception occurred
     */
    public int getAkismetMBMessagesCount() throws SystemException {
        return akismetMBMessagePersistence.countAll();
    }

    /**
     * Updates the akismet m b message in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param akismetMBMessage the akismet m b message
     * @return the akismet m b message that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public AkismetMBMessage updateAkismetMBMessage(
        AkismetMBMessage akismetMBMessage) throws SystemException {
        return updateAkismetMBMessage(akismetMBMessage, true);
    }

    /**
     * Updates the akismet m b message in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param akismetMBMessage the akismet m b message
     * @param merge whether to merge the akismet m b message with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
     * @return the akismet m b message that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    public AkismetMBMessage updateAkismetMBMessage(
        AkismetMBMessage akismetMBMessage, boolean merge)
        throws SystemException {
        akismetMBMessage.setNew(false);

        return akismetMBMessagePersistence.update(akismetMBMessage, merge);
    }

    /**
     * Returns the akismet m b message local service.
     *
     * @return the akismet m b message local service
     */
    public AkismetMBMessageLocalService getAkismetMBMessageLocalService() {
        return akismetMBMessageLocalService;
    }

    /**
     * Sets the akismet m b message local service.
     *
     * @param akismetMBMessageLocalService the akismet m b message local service
     */
    public void setAkismetMBMessageLocalService(
        AkismetMBMessageLocalService akismetMBMessageLocalService) {
        this.akismetMBMessageLocalService = akismetMBMessageLocalService;
    }

    /**
     * Returns the akismet m b message persistence.
     *
     * @return the akismet m b message persistence
     */
    public AkismetMBMessagePersistence getAkismetMBMessagePersistence() {
        return akismetMBMessagePersistence;
    }

    /**
     * Sets the akismet m b message persistence.
     *
     * @param akismetMBMessagePersistence the akismet m b message persistence
     */
    public void setAkismetMBMessagePersistence(
        AkismetMBMessagePersistence akismetMBMessagePersistence) {
        this.akismetMBMessagePersistence = akismetMBMessagePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the resource remote service.
     *
     * @return the resource remote service
     */
    public ResourceService getResourceService() {
        return resourceService;
    }

    /**
     * Sets the resource remote service.
     *
     * @param resourceService the resource remote service
     */
    public void setResourceService(ResourceService resourceService) {
        this.resourceService = resourceService;
    }

    /**
     * Returns the resource persistence.
     *
     * @return the resource persistence
     */
    public ResourcePersistence getResourcePersistence() {
        return resourcePersistence;
    }

    /**
     * Sets the resource persistence.
     *
     * @param resourcePersistence the resource persistence
     */
    public void setResourcePersistence(ResourcePersistence resourcePersistence) {
        this.resourcePersistence = resourcePersistence;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        PersistedModelLocalServiceRegistryUtil.register("fi.javaguru.akismet.mb.model.AkismetMBMessage",
            akismetMBMessageLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "fi.javaguru.akismet.mb.model.AkismetMBMessage");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
    }

    protected Class<?> getModelClass() {
        return AkismetMBMessage.class;
    }

    protected String getModelClassName() {
        return AkismetMBMessage.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = akismetMBMessagePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
