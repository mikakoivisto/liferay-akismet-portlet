package fi.javaguru.akismet.mb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import fi.javaguru.akismet.mb.model.AkismetMBMessage;
import fi.javaguru.akismet.mb.model.AkismetMBMessageModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AkismetMBMessage service. Represents a row in the &quot;Akismet_AkismetMBMessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.javaguru.akismet.mb.model.AkismetMBMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AkismetMBMessageImpl}.
 * </p>
 *
 * @author Mika Koivisto
 * @see AkismetMBMessageImpl
 * @see fi.javaguru.akismet.mb.model.AkismetMBMessage
 * @see fi.javaguru.akismet.mb.model.AkismetMBMessageModel
 * @generated
 */
public class AkismetMBMessageModelImpl extends BaseModelImpl<AkismetMBMessage>
    implements AkismetMBMessageModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a akismet m b message model instance should use the {@link fi.javaguru.akismet.mb.model.AkismetMBMessage} interface instead.
     */
    public static final String TABLE_NAME = "Akismet_AkismetMBMessage";
    public static final Object[][] TABLE_COLUMNS = {
            { "akismetMBMessageId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "mbMessageId", Types.BIGINT },
            { "spam", Types.BOOLEAN },
            { "author", Types.VARCHAR },
            { "authorEmail", Types.VARCHAR },
            { "authorUrl", Types.VARCHAR },
            { "content", Types.VARCHAR },
            { "permalink", Types.VARCHAR },
            { "referrer", Types.VARCHAR },
            { "type_", Types.VARCHAR },
            { "userAgent", Types.VARCHAR },
            { "userId", Types.BIGINT },
            { "userIp", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Akismet_AkismetMBMessage (akismetMBMessageId LONG not null primary key,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,mbMessageId LONG,spam BOOLEAN,author VARCHAR(75) null,authorEmail VARCHAR(75) null,authorUrl VARCHAR(75) null,content STRING null,permalink STRING null,referrer STRING null,type_ VARCHAR(75) null,userAgent VARCHAR(75) null,userId LONG,userIp VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Akismet_AkismetMBMessage";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.javaguru.akismet.mb.model.AkismetMBMessage"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.javaguru.akismet.mb.model.AkismetMBMessage"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.fi.javaguru.akismet.mb.model.AkismetMBMessage"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long MBMESSAGEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.javaguru.akismet.mb.model.AkismetMBMessage"));
    private static ClassLoader _classLoader = AkismetMBMessage.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            AkismetMBMessage.class
        };
    private long _akismetMBMessageId;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private Date _createDate;
    private Date _modifiedDate;
    private long _mbMessageId;
    private long _originalMbMessageId;
    private boolean _setOriginalMbMessageId;
    private boolean _spam;
    private String _author;
    private String _authorEmail;
    private String _authorUrl;
    private String _content;
    private String _permalink;
    private String _referrer;
    private String _type;
    private String _userAgent;
    private long _userId;
    private String _userUuid;
    private String _userIp;
    private long _columnBitmask;
    private AkismetMBMessage _escapedModelProxy;

    public AkismetMBMessageModelImpl() {
    }

    public long getPrimaryKey() {
        return _akismetMBMessageId;
    }

    public void setPrimaryKey(long primaryKey) {
        setAkismetMBMessageId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_akismetMBMessageId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return AkismetMBMessage.class;
    }

    public String getModelClassName() {
        return AkismetMBMessage.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("akismetMBMessageId", getAkismetMBMessageId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("mbMessageId", getMbMessageId());
        attributes.put("spam", getSpam());
        attributes.put("author", getAuthor());
        attributes.put("authorEmail", getAuthorEmail());
        attributes.put("authorUrl", getAuthorUrl());
        attributes.put("content", getContent());
        attributes.put("permalink", getPermalink());
        attributes.put("referrer", getReferrer());
        attributes.put("type", getType());
        attributes.put("userAgent", getUserAgent());
        attributes.put("userId", getUserId());
        attributes.put("userIp", getUserIp());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long akismetMBMessageId = (Long) attributes.get("akismetMBMessageId");

        if (akismetMBMessageId != null) {
            setAkismetMBMessageId(akismetMBMessageId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Long mbMessageId = (Long) attributes.get("mbMessageId");

        if (mbMessageId != null) {
            setMbMessageId(mbMessageId);
        }

        Boolean spam = (Boolean) attributes.get("spam");

        if (spam != null) {
            setSpam(spam);
        }

        String author = (String) attributes.get("author");

        if (author != null) {
            setAuthor(author);
        }

        String authorEmail = (String) attributes.get("authorEmail");

        if (authorEmail != null) {
            setAuthorEmail(authorEmail);
        }

        String authorUrl = (String) attributes.get("authorUrl");

        if (authorUrl != null) {
            setAuthorUrl(authorUrl);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        String permalink = (String) attributes.get("permalink");

        if (permalink != null) {
            setPermalink(permalink);
        }

        String referrer = (String) attributes.get("referrer");

        if (referrer != null) {
            setReferrer(referrer);
        }

        String type = (String) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        String userAgent = (String) attributes.get("userAgent");

        if (userAgent != null) {
            setUserAgent(userAgent);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userIp = (String) attributes.get("userIp");

        if (userIp != null) {
            setUserIp(userIp);
        }
    }

    public long getAkismetMBMessageId() {
        return _akismetMBMessageId;
    }

    public void setAkismetMBMessageId(long akismetMBMessageId) {
        _akismetMBMessageId = akismetMBMessageId;
    }

    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    public Date getModifiedDate() {
        return _modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getMbMessageId() {
        return _mbMessageId;
    }

    public void setMbMessageId(long mbMessageId) {
        _columnBitmask |= MBMESSAGEID_COLUMN_BITMASK;

        if (!_setOriginalMbMessageId) {
            _setOriginalMbMessageId = true;

            _originalMbMessageId = _mbMessageId;
        }

        _mbMessageId = mbMessageId;
    }

    public long getOriginalMbMessageId() {
        return _originalMbMessageId;
    }

    public boolean getSpam() {
        return _spam;
    }

    public boolean isSpam() {
        return _spam;
    }

    public void setSpam(boolean spam) {
        _spam = spam;
    }

    public String getAuthor() {
        if (_author == null) {
            return StringPool.BLANK;
        } else {
            return _author;
        }
    }

    public void setAuthor(String author) {
        _author = author;
    }

    public String getAuthorEmail() {
        if (_authorEmail == null) {
            return StringPool.BLANK;
        } else {
            return _authorEmail;
        }
    }

    public void setAuthorEmail(String authorEmail) {
        _authorEmail = authorEmail;
    }

    public String getAuthorUrl() {
        if (_authorUrl == null) {
            return StringPool.BLANK;
        } else {
            return _authorUrl;
        }
    }

    public void setAuthorUrl(String authorUrl) {
        _authorUrl = authorUrl;
    }

    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    public void setContent(String content) {
        _content = content;
    }

    public String getPermalink() {
        if (_permalink == null) {
            return StringPool.BLANK;
        } else {
            return _permalink;
        }
    }

    public void setPermalink(String permalink) {
        _permalink = permalink;
    }

    public String getReferrer() {
        if (_referrer == null) {
            return StringPool.BLANK;
        } else {
            return _referrer;
        }
    }

    public void setReferrer(String referrer) {
        _referrer = referrer;
    }

    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    public void setType(String type) {
        _type = type;
    }

    public String getUserAgent() {
        if (_userAgent == null) {
            return StringPool.BLANK;
        } else {
            return _userAgent;
        }
    }

    public void setUserAgent(String userAgent) {
        _userAgent = userAgent;
    }

    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public String getUserIp() {
        if (_userIp == null) {
            return StringPool.BLANK;
        } else {
            return _userIp;
        }
    }

    public void setUserIp(String userIp) {
        _userIp = userIp;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            AkismetMBMessage.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AkismetMBMessage toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (AkismetMBMessage) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        AkismetMBMessageImpl akismetMBMessageImpl = new AkismetMBMessageImpl();

        akismetMBMessageImpl.setAkismetMBMessageId(getAkismetMBMessageId());
        akismetMBMessageImpl.setCompanyId(getCompanyId());
        akismetMBMessageImpl.setGroupId(getGroupId());
        akismetMBMessageImpl.setCreateDate(getCreateDate());
        akismetMBMessageImpl.setModifiedDate(getModifiedDate());
        akismetMBMessageImpl.setMbMessageId(getMbMessageId());
        akismetMBMessageImpl.setSpam(getSpam());
        akismetMBMessageImpl.setAuthor(getAuthor());
        akismetMBMessageImpl.setAuthorEmail(getAuthorEmail());
        akismetMBMessageImpl.setAuthorUrl(getAuthorUrl());
        akismetMBMessageImpl.setContent(getContent());
        akismetMBMessageImpl.setPermalink(getPermalink());
        akismetMBMessageImpl.setReferrer(getReferrer());
        akismetMBMessageImpl.setType(getType());
        akismetMBMessageImpl.setUserAgent(getUserAgent());
        akismetMBMessageImpl.setUserId(getUserId());
        akismetMBMessageImpl.setUserIp(getUserIp());

        akismetMBMessageImpl.resetOriginalValues();

        return akismetMBMessageImpl;
    }

    public int compareTo(AkismetMBMessage akismetMBMessage) {
        long primaryKey = akismetMBMessage.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        AkismetMBMessage akismetMBMessage = null;

        try {
            akismetMBMessage = (AkismetMBMessage) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = akismetMBMessage.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AkismetMBMessageModelImpl akismetMBMessageModelImpl = this;

        akismetMBMessageModelImpl._originalGroupId = akismetMBMessageModelImpl._groupId;

        akismetMBMessageModelImpl._setOriginalGroupId = false;

        akismetMBMessageModelImpl._originalMbMessageId = akismetMBMessageModelImpl._mbMessageId;

        akismetMBMessageModelImpl._setOriginalMbMessageId = false;

        akismetMBMessageModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AkismetMBMessage> toCacheModel() {
        AkismetMBMessageCacheModel akismetMBMessageCacheModel = new AkismetMBMessageCacheModel();

        akismetMBMessageCacheModel.akismetMBMessageId = getAkismetMBMessageId();

        akismetMBMessageCacheModel.companyId = getCompanyId();

        akismetMBMessageCacheModel.groupId = getGroupId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            akismetMBMessageCacheModel.createDate = createDate.getTime();
        } else {
            akismetMBMessageCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            akismetMBMessageCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            akismetMBMessageCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        akismetMBMessageCacheModel.mbMessageId = getMbMessageId();

        akismetMBMessageCacheModel.spam = getSpam();

        akismetMBMessageCacheModel.author = getAuthor();

        String author = akismetMBMessageCacheModel.author;

        if ((author != null) && (author.length() == 0)) {
            akismetMBMessageCacheModel.author = null;
        }

        akismetMBMessageCacheModel.authorEmail = getAuthorEmail();

        String authorEmail = akismetMBMessageCacheModel.authorEmail;

        if ((authorEmail != null) && (authorEmail.length() == 0)) {
            akismetMBMessageCacheModel.authorEmail = null;
        }

        akismetMBMessageCacheModel.authorUrl = getAuthorUrl();

        String authorUrl = akismetMBMessageCacheModel.authorUrl;

        if ((authorUrl != null) && (authorUrl.length() == 0)) {
            akismetMBMessageCacheModel.authorUrl = null;
        }

        akismetMBMessageCacheModel.content = getContent();

        String content = akismetMBMessageCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            akismetMBMessageCacheModel.content = null;
        }

        akismetMBMessageCacheModel.permalink = getPermalink();

        String permalink = akismetMBMessageCacheModel.permalink;

        if ((permalink != null) && (permalink.length() == 0)) {
            akismetMBMessageCacheModel.permalink = null;
        }

        akismetMBMessageCacheModel.referrer = getReferrer();

        String referrer = akismetMBMessageCacheModel.referrer;

        if ((referrer != null) && (referrer.length() == 0)) {
            akismetMBMessageCacheModel.referrer = null;
        }

        akismetMBMessageCacheModel.type = getType();

        String type = akismetMBMessageCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            akismetMBMessageCacheModel.type = null;
        }

        akismetMBMessageCacheModel.userAgent = getUserAgent();

        String userAgent = akismetMBMessageCacheModel.userAgent;

        if ((userAgent != null) && (userAgent.length() == 0)) {
            akismetMBMessageCacheModel.userAgent = null;
        }

        akismetMBMessageCacheModel.userId = getUserId();

        akismetMBMessageCacheModel.userIp = getUserIp();

        String userIp = akismetMBMessageCacheModel.userIp;

        if ((userIp != null) && (userIp.length() == 0)) {
            akismetMBMessageCacheModel.userIp = null;
        }

        return akismetMBMessageCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(35);

        sb.append("{akismetMBMessageId=");
        sb.append(getAkismetMBMessageId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", mbMessageId=");
        sb.append(getMbMessageId());
        sb.append(", spam=");
        sb.append(getSpam());
        sb.append(", author=");
        sb.append(getAuthor());
        sb.append(", authorEmail=");
        sb.append(getAuthorEmail());
        sb.append(", authorUrl=");
        sb.append(getAuthorUrl());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", permalink=");
        sb.append(getPermalink());
        sb.append(", referrer=");
        sb.append(getReferrer());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", userAgent=");
        sb.append(getUserAgent());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userIp=");
        sb.append(getUserIp());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(55);

        sb.append("<model><model-name>");
        sb.append("fi.javaguru.akismet.mb.model.AkismetMBMessage");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>akismetMBMessageId</column-name><column-value><![CDATA[");
        sb.append(getAkismetMBMessageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mbMessageId</column-name><column-value><![CDATA[");
        sb.append(getMbMessageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>spam</column-name><column-value><![CDATA[");
        sb.append(getSpam());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>author</column-name><column-value><![CDATA[");
        sb.append(getAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorEmail</column-name><column-value><![CDATA[");
        sb.append(getAuthorEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorUrl</column-name><column-value><![CDATA[");
        sb.append(getAuthorUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>permalink</column-name><column-value><![CDATA[");
        sb.append(getPermalink());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>referrer</column-name><column-value><![CDATA[");
        sb.append(getReferrer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userAgent</column-name><column-value><![CDATA[");
        sb.append(getUserAgent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userIp</column-name><column-value><![CDATA[");
        sb.append(getUserIp());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
